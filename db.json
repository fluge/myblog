{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"909a2b39bf012a9bb70865f9ba4569a08b165adb","modified":1480069841000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1479867349000},{"_id":"themes/next/.DS_Store","hash":"2b625d07f623f759013dea29b80b472905a79f45","modified":1480070192000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1479867349000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1479867349000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1479867349000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1479867349000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1479867349000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1479867349000},{"_id":"themes/next/_config.yml","hash":"7124a67455b4953a9836fb52f1811e1864cfa509","modified":1480328883000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1479867349000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1479867349000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1479867349000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1479867349000},{"_id":"source/_posts/IP初识.md","hash":"b963f780eecc484b51e3b2ff7f558b0d48dfc2dd","modified":1480325372000},{"_id":"source/_posts/第一篇博客.md","hash":"1b6c110f81fb5aa562937854f8a9d95ed333a0bf","modified":1480582814000},{"_id":"source/categories/index.md","hash":"f4183123ad94941cee8aeb3dbfa617228ece8f7a","modified":1480325818000},{"_id":"source/_posts/golang的切片和Java的动态数组.md","hash":"a2b6f38f6a0557095251d7f4c818a1bd574252a6","modified":1480579272000},{"_id":"source/tags/index.md","hash":"25f96387fa50d21e559d75b93cd8b7fc6cbe34ff","modified":1480325776000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1479867349000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1479867349000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1479867349000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1479867349000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1479867349000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1479867349000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1479867349000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1479867349000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1479867349000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1479867349000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1479867349000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1479867349000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1479867349000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1479867349000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1479867349000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1479867349000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1479867349000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1479867349000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1479867349000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1479867349000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1479867349000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1479867349000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1479867349000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1479867349000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479867349000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1479867349000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1479867349000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1479867349000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1479867349000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1479867349000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1479867349000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1479867349000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1479867349000},{"_id":"themes/next/layout/_partials/header.swig","hash":"963a765dc00e6ac43cfc53ffaf5725eb854cf95e","modified":1479867349000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1479867349000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1479867349000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f83b1c55bedd2c1a3eb734c72c6997795a4e5f99","modified":1479867349000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1479867349000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1479867349000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1479867349000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1479867349000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1479867349000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1479867349000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1479867349000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1479867349000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1479867349000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1479867349000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1479867349000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1479867349000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1479867349000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1479867349000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1479867349000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1479867349000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479867349000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479867349000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1479867349000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1479867349000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1479867349000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479867349000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479867349000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479867349000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479867349000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479867349000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479867349000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479867349000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1479867349000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1479867349000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1479867349000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1479867349000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1479867349000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1479867349000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1479867349000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1479867349000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1479867349000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1479867349000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1479867349000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1479867349000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"069bb17fb1db3bc7c85c88efa3ed94ab6becbe2c","modified":1479867349000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1479867349000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1479867349000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1479867349000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1479867349000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1479867349000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1479867349000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1479867349000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1479867349000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1479867349000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1479867349000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1479867349000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1479867349000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1479867349000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1479867349000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1479867349000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1479867349000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1479867349000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1479867349000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1479867349000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1479867349000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1479867349000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1479867349000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1479867349000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1479867349000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1479867349000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1479867349000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1479867349000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1479867349000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1479867349000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1479867349000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1479867349000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1479867349000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1479867349000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1479867349000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1479867349000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1479867349000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1479867349000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1479867349000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1479867349000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1479867349000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1479867349000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1479867349000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1479867349000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1479867349000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1479867349000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1479867349000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1479867349000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479867349000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479867349000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479867349000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479867349000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479867349000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1479867349000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1479867349000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1479867349000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479867349000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1479867349000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1479867349000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1479867349000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1479867349000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1479867349000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1479867349000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1479867349000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1479867349000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1479867349000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1479867349000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1479867349000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1479867349000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1479867349000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1479867349000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1479867349000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1479867349000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1479867349000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1479867349000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1479867349000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1479867349000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1479867349000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1479867349000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1479867349000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1479867349000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1479867349000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1479867349000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1479867349000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1479867349000},{"_id":"public/404.html","hash":"efaa9e64ea89ace2fe10f3dcf31d312c02f41540","modified":1480649115414},{"_id":"public/categories/index.html","hash":"49f121f2969a315d7bb73b201efd395a6b584e84","modified":1480649115414},{"_id":"public/tags/index.html","hash":"2e32647bb0712a52f940de64709603d47c87f878","modified":1480649115415},{"_id":"public/2016/11/25/第一篇博客/index.html","hash":"81a6bb8d20efb8a905bbfb0f9523b3fa38bfbaf2","modified":1480649115415},{"_id":"public/archives/index.html","hash":"0014359c229d74ac4513e471c4dad1f8b20b00bd","modified":1480649115415},{"_id":"public/archives/2016/index.html","hash":"42c003507e4a14b02ed75854937052c3c4181f55","modified":1480649115415},{"_id":"public/archives/2016/11/index.html","hash":"de24d4447cf48ad5f6c937d0be1689d19580a4b0","modified":1480649115415},{"_id":"public/categories/TCP-IP/index.html","hash":"a9025549c54d67710f12a89324129e75e608a6b0","modified":1480649115415},{"_id":"public/categories/essay/index.html","hash":"4278617128457004ac92f46a50171a73abc6d399","modified":1480649115415},{"_id":"public/categories/Java和golang/index.html","hash":"46525b9bafefb5631e39c56c336db60f03390774","modified":1480649115415},{"_id":"public/tags/ip/index.html","hash":"92566f1bad094e0a34d924de6bccd367dadee84a","modified":1480649115415},{"_id":"public/tags/start/index.html","hash":"321e73c60ad72e248474d922de89c9b127b78cb9","modified":1480649115415},{"_id":"public/tags/golang/index.html","hash":"be3dcb2d7111b3ffa610fdb7f4eacf587f38dc85","modified":1480649115415},{"_id":"public/tags/Java/index.html","hash":"0a6c982a8abfd355659cea41cee4011116ff5e44","modified":1480649115415},{"_id":"public/2016/11/29/golang的切片和Java的动态数组/index.html","hash":"3d04b23425b2e5a1ddcba66f879fe5a2653133da","modified":1480649115416},{"_id":"public/2016/11/28/IP初识/index.html","hash":"069743dad260e667a0f6c09c447efc2f98eb7a2d","modified":1480649115416},{"_id":"public/index.html","hash":"50ca7c4e33a88d71eef3a8fe56c55488e77ac22c","modified":1480649115416},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1480649115429},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1480649115430},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1480649115430},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1480649115430},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1480649115430},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1480649115430},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1480649115430},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1480649115430},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480649115430},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1480649115430},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480649115430},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1480649115430},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1480649115430},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1480649115430},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1480649115430},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480649115430},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480649115430},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480649115430},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480649115430},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480649115430},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480649115431},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1480649115431},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1480649115431},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480649115431},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1480649116368},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1480649116383},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1480649116385},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1480649116393},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1480649116393},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1480649116393},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1480649116393},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1480649116393},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1480649116393},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1480649116393},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1480649116393},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1480649116393},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1480649116393},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1480649116393},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1480649116393},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1480649116393},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1480649116394},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1480649116394},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1480649116394},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1480649116394},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1480649116394},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1480649116394},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1480649116394},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1480649116394},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1480649116395},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1480649116395},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1480649116395},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480649116395},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1480649116396},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480649116396},{"_id":"public/css/main.css","hash":"f34d52d055fb5577c67be8639d6970ff8cbefa49","modified":1480649116396},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1480649116396},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1480649116396},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1480649116396},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1480649116396},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1480649116396},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1480649116396},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1480649116396},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1480649116396},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1480649116396},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1480649116396},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1480649116410}],"Category":[{"name":"TCP/IP","_id":"ciw7894760005arikfgr1u8p0"},{"name":"essay","_id":"ciw78947c0008arikpjmysqh2"},{"name":"Java和golang","_id":"ciw78947g000carikyce8xhf3"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>","date":"2016-11-25T10:30:41.000Z","updated":"2016-11-25T10:30:41.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ciw78945i0000ariklhl2i750","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"your site url \" homepagename=\"回到我的主页\">\n</script>\n\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>"},{"title":"categories","date":"2016-11-28T09:36:35.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-28 17:36:35\ntype: \"categories\"\n---\n","updated":"2016-11-28T09:36:58.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciw78946q0001arikezjezmhy","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-11-28T09:36:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-28 17:36:00\ntype: \"tags\"\n---\n","updated":"2016-11-28T09:36:16.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciw7894730003arikix4pejhy","content":"","excerpt":"","more":""}],"Post":[{"title":"IP初识","date":"2016-11-28T06:18:00.000Z","_content":"### 基本认识\n&emsp;最近一次接触ip是在我读《TCP/IP详解》时读到了，其实我感觉这些基础对理解整个互联网的结构都有一些很好的认识，在TCP/IP的协议簇中，首先简单的说一下在TCP中分层：  \n- 数据链路层:一般都是物理设备驱动程序和接口\n- 网络层:处理分组在网络中的活动，如分组选路。TCP/IP中,IP协议,ICMP协议,IGMP协议\n- 运输层:主要为应用程序提供端到端的通信，主要包括两种协议:TCP(高可靠的)、UDP(不可靠的，效率高的)\n- 应用层:负责处理特定的应用程序的细节\n![](http://ofa8x9gy9.bkt.clouddn.com/TCP:IP%E5%88%86%E5%B1%82.png)\n上图是我认为对TCP/IP分层的理解很好的一张图TCP/IP分层和传统的OSI分层不一样。OSI的7层是分的更加详细。对于TCP/IP的协议簇重点关注的还是网络层，运输层。  \n  <!-- more -->  \n  在TCP/IP中有一个分层的概念值得注意:  \n> 应用层关心的是应用程序的细节，而不是数据在网络中的传输活动。下三层对应用程序一无所知，但它们要处理所有的通信细节.IP协议是一种不可靠的网络层服务,它只是尽可能的快地把分组从源节点送到目的节点,并不提供任何可靠性的保证,但是IP得可靠服务可以由上层协议(TCP)来提供。\n\n### IP地址的分类\n &emsp;互联网上每个接口必须有一个唯一32位的Internet地址(IP地址),基本分类如下：  \n![](http://ofa8x9gy9.bkt.clouddn.com/%E4%BA%94%E7%B1%BB%E4%BA%92%E8%81%94%E7%BD%91%E5%9C%B0%E5%9D%80.png)  \nIP地址是具有一定基本结构，一共有5类地址,每一类都包括:标志位、网络号、主机号。5类地址分为三种:单播地址(目的为单个主机,有:A、B、C)，广播地址(目的端为给定网络上的所有主机:D),多播地址(目的端为同一组内的所有主机:E)。  \n### IP的子网掩码  \n&emsp;由于除了IP地址外，主机还需要知道有那几位是子网号,那几位是主机号,这两个信息都是通过子网掩码来获得  \n![](http://ofa8x9gy9.bkt.clouddn.com/%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81.png)  \n> ps:判断一个IP地址所属的类别，一般看IP地址的开头就行，不看子网掩码。一般0~127是A类,128~191是B类,192~223是C类，224~239是D类。\n\n### 子网寻址  \n现在的所有主机都要求支持子网编址。不是把IP地址看成由单纯的一个网络号和一个主机号组成，而是*把主机号在分成一个子网号和一个主机号*。这样做的原因就是应为A类和B类地址为主机号分配了太多的空间，可分别容纳的主机数为16777214和65534个主机,但是事实上,在一个网络中一般安排不了这么多的主机。下图为B类子网划分的例子:\n![](http://ofa8x9gy9.bkt.clouddn.com/%E5%AD%90%E7%BD%91%E5%AF%BB%E5%9D%80.png)  \n上面是一个B类网络地址(140.252),在剩下的16位中，8为用于子网号,8为用于主机号,这样就允许254个子网,每个子网就可以有254台主机。","source":"_posts/IP初识.md","raw":"---\ntitle: IP初识\ndate: 2016-11-28 14:18:00\ncategories: \n- TCP/IP\ntags:\n- ip\n---\n### 基本认识\n&emsp;最近一次接触ip是在我读《TCP/IP详解》时读到了，其实我感觉这些基础对理解整个互联网的结构都有一些很好的认识，在TCP/IP的协议簇中，首先简单的说一下在TCP中分层：  \n- 数据链路层:一般都是物理设备驱动程序和接口\n- 网络层:处理分组在网络中的活动，如分组选路。TCP/IP中,IP协议,ICMP协议,IGMP协议\n- 运输层:主要为应用程序提供端到端的通信，主要包括两种协议:TCP(高可靠的)、UDP(不可靠的，效率高的)\n- 应用层:负责处理特定的应用程序的细节\n![](http://ofa8x9gy9.bkt.clouddn.com/TCP:IP%E5%88%86%E5%B1%82.png)\n上图是我认为对TCP/IP分层的理解很好的一张图TCP/IP分层和传统的OSI分层不一样。OSI的7层是分的更加详细。对于TCP/IP的协议簇重点关注的还是网络层，运输层。  \n  <!-- more -->  \n  在TCP/IP中有一个分层的概念值得注意:  \n> 应用层关心的是应用程序的细节，而不是数据在网络中的传输活动。下三层对应用程序一无所知，但它们要处理所有的通信细节.IP协议是一种不可靠的网络层服务,它只是尽可能的快地把分组从源节点送到目的节点,并不提供任何可靠性的保证,但是IP得可靠服务可以由上层协议(TCP)来提供。\n\n### IP地址的分类\n &emsp;互联网上每个接口必须有一个唯一32位的Internet地址(IP地址),基本分类如下：  \n![](http://ofa8x9gy9.bkt.clouddn.com/%E4%BA%94%E7%B1%BB%E4%BA%92%E8%81%94%E7%BD%91%E5%9C%B0%E5%9D%80.png)  \nIP地址是具有一定基本结构，一共有5类地址,每一类都包括:标志位、网络号、主机号。5类地址分为三种:单播地址(目的为单个主机,有:A、B、C)，广播地址(目的端为给定网络上的所有主机:D),多播地址(目的端为同一组内的所有主机:E)。  \n### IP的子网掩码  \n&emsp;由于除了IP地址外，主机还需要知道有那几位是子网号,那几位是主机号,这两个信息都是通过子网掩码来获得  \n![](http://ofa8x9gy9.bkt.clouddn.com/%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81.png)  \n> ps:判断一个IP地址所属的类别，一般看IP地址的开头就行，不看子网掩码。一般0~127是A类,128~191是B类,192~223是C类，224~239是D类。\n\n### 子网寻址  \n现在的所有主机都要求支持子网编址。不是把IP地址看成由单纯的一个网络号和一个主机号组成，而是*把主机号在分成一个子网号和一个主机号*。这样做的原因就是应为A类和B类地址为主机号分配了太多的空间，可分别容纳的主机数为16777214和65534个主机,但是事实上,在一个网络中一般安排不了这么多的主机。下图为B类子网划分的例子:\n![](http://ofa8x9gy9.bkt.clouddn.com/%E5%AD%90%E7%BD%91%E5%AF%BB%E5%9D%80.png)  \n上面是一个B类网络地址(140.252),在剩下的16位中，8为用于子网号,8为用于主机号,这样就允许254个子网,每个子网就可以有254台主机。","slug":"IP初识","published":1,"updated":"2016-11-28T09:29:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw78946s0002arik2gqnh7ai","content":"<h3 id=\"基本认识\"><a href=\"#基本认识\" class=\"headerlink\" title=\"基本认识\"></a>基本认识</h3><p>&emsp;最近一次接触ip是在我读《TCP/IP详解》时读到了，其实我感觉这些基础对理解整个互联网的结构都有一些很好的认识，在TCP/IP的协议簇中，首先简单的说一下在TCP中分层：  </p>\n<ul>\n<li>数据链路层:一般都是物理设备驱动程序和接口</li>\n<li>网络层:处理分组在网络中的活动，如分组选路。TCP/IP中,IP协议,ICMP协议,IGMP协议</li>\n<li>运输层:主要为应用程序提供端到端的通信，主要包括两种协议:TCP(高可靠的)、UDP(不可靠的，效率高的)</li>\n<li>应用层:负责处理特定的应用程序的细节<br><img src=\"http://ofa8x9gy9.bkt.clouddn.com/TCP:IP%E5%88%86%E5%B1%82.png\" alt=\"\"><br>上图是我认为对TCP/IP分层的理解很好的一张图TCP/IP分层和传统的OSI分层不一样。OSI的7层是分的更加详细。对于TCP/IP的协议簇重点关注的还是网络层，运输层。  <a id=\"more\"></a>  \n在TCP/IP中有一个分层的概念值得注意:  <blockquote>\n<p>应用层关心的是应用程序的细节，而不是数据在网络中的传输活动。下三层对应用程序一无所知，但它们要处理所有的通信细节.IP协议是一种不可靠的网络层服务,它只是尽可能的快地把分组从源节点送到目的节点,并不提供任何可靠性的保证,但是IP得可靠服务可以由上层协议(TCP)来提供。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"IP地址的分类\"><a href=\"#IP地址的分类\" class=\"headerlink\" title=\"IP地址的分类\"></a>IP地址的分类</h3><p> &emsp;互联网上每个接口必须有一个唯一32位的Internet地址(IP地址),基本分类如下：<br><img src=\"http://ofa8x9gy9.bkt.clouddn.com/%E4%BA%94%E7%B1%BB%E4%BA%92%E8%81%94%E7%BD%91%E5%9C%B0%E5%9D%80.png\" alt=\"\"><br>IP地址是具有一定基本结构，一共有5类地址,每一类都包括:标志位、网络号、主机号。5类地址分为三种:单播地址(目的为单个主机,有:A、B、C)，广播地址(目的端为给定网络上的所有主机:D),多播地址(目的端为同一组内的所有主机:E)。  </p>\n<h3 id=\"IP的子网掩码\"><a href=\"#IP的子网掩码\" class=\"headerlink\" title=\"IP的子网掩码\"></a>IP的子网掩码</h3><p>&emsp;由于除了IP地址外，主机还需要知道有那几位是子网号,那几位是主机号,这两个信息都是通过子网掩码来获得<br><img src=\"http://ofa8x9gy9.bkt.clouddn.com/%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81.png\" alt=\"\">  </p>\n<blockquote>\n<p>ps:判断一个IP地址所属的类别，一般看IP地址的开头就行，不看子网掩码。一般0~127是A类,128~191是B类,192~223是C类，224~239是D类。</p>\n</blockquote>\n<h3 id=\"子网寻址\"><a href=\"#子网寻址\" class=\"headerlink\" title=\"子网寻址\"></a>子网寻址</h3><p>现在的所有主机都要求支持子网编址。不是把IP地址看成由单纯的一个网络号和一个主机号组成，而是<em>把主机号在分成一个子网号和一个主机号</em>。这样做的原因就是应为A类和B类地址为主机号分配了太多的空间，可分别容纳的主机数为16777214和65534个主机,但是事实上,在一个网络中一般安排不了这么多的主机。下图为B类子网划分的例子:<br><img src=\"http://ofa8x9gy9.bkt.clouddn.com/%E5%AD%90%E7%BD%91%E5%AF%BB%E5%9D%80.png\" alt=\"\"><br>上面是一个B类网络地址(140.252),在剩下的16位中，8为用于子网号,8为用于主机号,这样就允许254个子网,每个子网就可以有254台主机。</p>\n","excerpt":"<h3 id=\"基本认识\"><a href=\"#基本认识\" class=\"headerlink\" title=\"基本认识\"></a>基本认识</h3><p>&emsp;最近一次接触ip是在我读《TCP/IP详解》时读到了，其实我感觉这些基础对理解整个互联网的结构都有一些很好的认识，在TCP/IP的协议簇中，首先简单的说一下在TCP中分层：  </p>\n<ul>\n<li>数据链路层:一般都是物理设备驱动程序和接口</li>\n<li>网络层:处理分组在网络中的活动，如分组选路。TCP/IP中,IP协议,ICMP协议,IGMP协议</li>\n<li>运输层:主要为应用程序提供端到端的通信，主要包括两种协议:TCP(高可靠的)、UDP(不可靠的，效率高的)</li>\n<li>应用层:负责处理特定的应用程序的细节<br><img src=\"http://ofa8x9gy9.bkt.clouddn.com/TCP:IP%E5%88%86%E5%B1%82.png\" alt=\"\"><br>上图是我认为对TCP/IP分层的理解很好的一张图TCP/IP分层和传统的OSI分层不一样。OSI的7层是分的更加详细。对于TCP/IP的协议簇重点关注的还是网络层，运输层。","more":"在TCP/IP中有一个分层的概念值得注意:  <blockquote>\n<p>应用层关心的是应用程序的细节，而不是数据在网络中的传输活动。下三层对应用程序一无所知，但它们要处理所有的通信细节.IP协议是一种不可靠的网络层服务,它只是尽可能的快地把分组从源节点送到目的节点,并不提供任何可靠性的保证,但是IP得可靠服务可以由上层协议(TCP)来提供。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"IP地址的分类\"><a href=\"#IP地址的分类\" class=\"headerlink\" title=\"IP地址的分类\"></a>IP地址的分类</h3><p> &emsp;互联网上每个接口必须有一个唯一32位的Internet地址(IP地址),基本分类如下：<br><img src=\"http://ofa8x9gy9.bkt.clouddn.com/%E4%BA%94%E7%B1%BB%E4%BA%92%E8%81%94%E7%BD%91%E5%9C%B0%E5%9D%80.png\" alt=\"\"><br>IP地址是具有一定基本结构，一共有5类地址,每一类都包括:标志位、网络号、主机号。5类地址分为三种:单播地址(目的为单个主机,有:A、B、C)，广播地址(目的端为给定网络上的所有主机:D),多播地址(目的端为同一组内的所有主机:E)。  </p>\n<h3 id=\"IP的子网掩码\"><a href=\"#IP的子网掩码\" class=\"headerlink\" title=\"IP的子网掩码\"></a>IP的子网掩码</h3><p>&emsp;由于除了IP地址外，主机还需要知道有那几位是子网号,那几位是主机号,这两个信息都是通过子网掩码来获得<br><img src=\"http://ofa8x9gy9.bkt.clouddn.com/%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81.png\" alt=\"\">  </p>\n<blockquote>\n<p>ps:判断一个IP地址所属的类别，一般看IP地址的开头就行，不看子网掩码。一般0~127是A类,128~191是B类,192~223是C类，224~239是D类。</p>\n</blockquote>\n<h3 id=\"子网寻址\"><a href=\"#子网寻址\" class=\"headerlink\" title=\"子网寻址\"></a>子网寻址</h3><p>现在的所有主机都要求支持子网编址。不是把IP地址看成由单纯的一个网络号和一个主机号组成，而是<em>把主机号在分成一个子网号和一个主机号</em>。这样做的原因就是应为A类和B类地址为主机号分配了太多的空间，可分别容纳的主机数为16777214和65534个主机,但是事实上,在一个网络中一般安排不了这么多的主机。下图为B类子网划分的例子:<br><img src=\"http://ofa8x9gy9.bkt.clouddn.com/%E5%AD%90%E7%BD%91%E5%AF%BB%E5%9D%80.png\" alt=\"\"><br>上面是一个B类网络地址(140.252),在剩下的16位中，8为用于子网号,8为用于主机号,这样就允许254个子网,每个子网就可以有254台主机。</p>"},{"title":"第一篇博客","date":"2016-11-25T08:42:04.000Z","_content":"<<<<<<< HEAD\n开始写了有点小激动\n---\n=======\n### 开始写了有点小激动\n&emsp;&emsp;第一篇博客，其实以前也写过一些博文，但是都是不成体系的，一直都想写，但是总被一些事情给牵住了，终于可以开始第一篇博文的书写。这个博客主要记录我从大四实习开始的路程，不知道以后这个博客可以坚持多长时间，但是希望越久越好。我现在主要方向还是Java和golang的后端开发。因为两个的基础都不是很好。积累基础是一个很缓慢的过程，所以只能慢慢的往上爬。不能急。我会在博客中更新我最近学习的东西，和在工作中的坑。希望自己的技术能越来越来。说不定，以后就给自己的博客一个独立的域名，只是现在，刚开始。不急。","source":"_posts/第一篇博客.md","raw":"---\ntitle: 第一篇博客\ndate: 2016-11-25 16:42:04\ncategories: \n- essay\ntags:\n- start\n---\n<<<<<<< HEAD\n开始写了有点小激动\n---\n=======\n### 开始写了有点小激动\n&emsp;&emsp;第一篇博客，其实以前也写过一些博文，但是都是不成体系的，一直都想写，但是总被一些事情给牵住了，终于可以开始第一篇博文的书写。这个博客主要记录我从大四实习开始的路程，不知道以后这个博客可以坚持多长时间，但是希望越久越好。我现在主要方向还是Java和golang的后端开发。因为两个的基础都不是很好。积累基础是一个很缓慢的过程，所以只能慢慢的往上爬。不能急。我会在博客中更新我最近学习的东西，和在工作中的坑。希望自己的技术能越来越来。说不定，以后就给自己的博客一个独立的域名，只是现在，刚开始。不急。","slug":"第一篇博客","published":1,"updated":"2016-12-01T09:00:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7894740004arikkl62xx2r","content":"<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>\n<h2 id=\"开始写了有点小激动\"><a href=\"#开始写了有点小激动\" class=\"headerlink\" title=\"开始写了有点小激动\"></a>开始写了有点小激动</h2><p>=======</p>\n<h3 id=\"开始写了有点小激动-1\"><a href=\"#开始写了有点小激动-1\" class=\"headerlink\" title=\"开始写了有点小激动\"></a>开始写了有点小激动</h3><p>&emsp;&emsp;第一篇博客，其实以前也写过一些博文，但是都是不成体系的，一直都想写，但是总被一些事情给牵住了，终于可以开始第一篇博文的书写。这个博客主要记录我从大四实习开始的路程，不知道以后这个博客可以坚持多长时间，但是希望越久越好。我现在主要方向还是Java和golang的后端开发。因为两个的基础都不是很好。积累基础是一个很缓慢的过程，所以只能慢慢的往上爬。不能急。我会在博客中更新我最近学习的东西，和在工作中的坑。希望自己的技术能越来越来。说不定，以后就给自己的博客一个独立的域名，只是现在，刚开始。不急。</p>\n","excerpt":"","more":"<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>\n<h2 id=\"开始写了有点小激动\"><a href=\"#开始写了有点小激动\" class=\"headerlink\" title=\"开始写了有点小激动\"></a>开始写了有点小激动</h2><p>=======</p>\n<h3 id=\"开始写了有点小激动-1\"><a href=\"#开始写了有点小激动-1\" class=\"headerlink\" title=\"开始写了有点小激动\"></a>开始写了有点小激动</h3><p>&emsp;&emsp;第一篇博客，其实以前也写过一些博文，但是都是不成体系的，一直都想写，但是总被一些事情给牵住了，终于可以开始第一篇博文的书写。这个博客主要记录我从大四实习开始的路程，不知道以后这个博客可以坚持多长时间，但是希望越久越好。我现在主要方向还是Java和golang的后端开发。因为两个的基础都不是很好。积累基础是一个很缓慢的过程，所以只能慢慢的往上爬。不能急。我会在博客中更新我最近学习的东西，和在工作中的坑。希望自己的技术能越来越来。说不定，以后就给自己的博客一个独立的域名，只是现在，刚开始。不急。</p>\n"},{"title":"golang的切片和Java的动态数组","date":"2016-11-29T09:44:44.000Z","_content":"### Java里的动态数组---ArrayList  \nArrayList是实现List接口的动态数组，每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。随着向ArrayList中不断添加元素，容量会自动增长，自动增长会带来数据向新数组的*重新拷贝*。同时需要注意的是这个实现不是同步的。如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。(结构上的修改是指任何添加或删除一个或多个元素的的操作，或者显示调整底层数组的大小；仅仅设置元素的值不是结构上的修改)  \n<!--more-->\n##### Java里面的初始化和实现\n```java\n   public class ArrayList<E>   extends \t AbstractList<E>  implements   List<E>, RandomAccess, Cloneable, java.io.Serializable{\n \t\n     //设置arrayList默认容量\n     private static final int DEFAULT_CAPACITY = 10;\n \n     //空数组，当调用无参数构造函数的时候默认给个空数组\n     private static final Object[] EMPTY_ELEMENTDATA = {};\n \n     //这才是真正保存数据的数组\n     private transient Object[] elementData;\n \n     //arrayList的实际元素数量\n     private int size;\n \n     //构造方法传入默认的capacity 设置默认数组大小\n     public ArrayList(int initialCapacity) {\n         super();\n         if (initialCapacity < 0)\n             throw new IllegalArgumentException(\"Illegal Capacity: \"+ initialCapacity);\n         this.elementData = new Object[initialCapacity];\n     }\n \n     //无参数构造方法默认为空数组\n     public ArrayList() {\n         super();\n         this.elementData = EMPTY_ELEMENTDATA;\n     }\n \n     //构造方法传入一个Collection， 则将Collection里面的值copy到arrayList\n     public ArrayList(Collection<? extends E> c) {\n         elementData = c.toArray();\n         size = elementData.length;\n         if (elementData.getClass() != Object[].class)\n             elementData = Arrays.copyOf(elementData, size, Object[].class);\n     }\n}\n```\n从上面的源码可以看出来，ArrayList的本质就是数组的，其中的add,get,set,remove等操作都是对数组的操作，所以ArrayList的特性基本都是源于数组:有序、元素可以重复、插入慢、获取快等特性。\n\n##### ArrayList里面的将数组动态扩容实现add和remove\n```java\n    //在末尾增加元素，虽然有时需要扩容但是时间复杂度为O(1)\n\tpublic boolean add(E e) {\n         ensureCapacityInternal(size + 1);  // Increments modCount!!\n         elementData[size++] = e;\n         return true;\n     }\n     //在数组中间增加元素，因为需要移动后面的元素，所以时间复杂度为O(n)\n     public void add(int index, E element) {\n         rangeCheckForAdd(index);\n \n         ensureCapacityInternal(size + 1);  // Increments modCount!!\n         System.arraycopy(elementData, index, elementData, index + 1,\n                          size - index);\n         elementData[index] = element;\n     } \n     private void ensureCapacityInternal(int minCapacity) {\n         if (elementData == EMPTY_ELEMENTDATA) {\n              minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n         }\n         ensureExplicitCapacity(minCapacity);\n      }\n      private void ensureExplicitCapacity(int minCapacity) {\n          modCount++;\n         //超出了数组可容纳的长度，需要进行动态扩展\n         if (minCapacity - elementData.length > 0)\n             grow(minCapacity);\n     }\n      //这才是动态扩展的核心\n     private void grow(int minCapacity) {\n         int oldCapacity = elementData.length;\n         //设置新数组的容量扩展为原来数组的1.5倍\n         int newCapacity = oldCapacity + (oldCapacity >> 1);\n         //再判断一下新数组的容量够不够，够了就直接使用这个长度创建新数组， 不够就将数组长度设置为需要的长度\n         if (newCapacity - minCapacity < 0)\n             newCapacity = minCapacity;\n         //判断有没超过最大限制\n         if (newCapacity - MAX_ARRAY_SIZE > 0)\n             newCapacity = hugeCapacity(minCapacity);\n         //将原来数组的值copy新数组中去\n         elementData = Arrays.copyOf(elementData, newCapacity);\n     }\n     private static int hugeCapacity(int minCapacity) {\n         if (minCapacity < 0) // overflow\n              throw new OutOfMemoryError();\n         return (minCapacity > MAX_ARRAY_SIZE) ?\n             Integer.MAX_VALUE :\n             MAX_ARRAY_SIZE;\n     }\n```\n从上面的ArrayList的源码就可以知道,整个ArrayList的动态实现就是在增加数据的时候判断数组的容量是否足够,不够就重新生成一个1.5倍的数组,然后进行复制。这就是整个ArrayList的核心。\n### golang里面的动态数组---slice\n#### Go中的数组定义\n在Go中的数组和Java有点不一样。在golang中数组是内置类型,初始化后长度是固定的，没有办法修改其长度,数组的长度也是其类型的一部分。数组是值类型,通过从0开始的下标索引访问元素值。值得注意的是如果GO中的数组作为函数的参数，那么实际传递的参数是一份数组的拷贝,而不是数组的指针。  \n![](http://ofa8x9gy9.bkt.clouddn.com/golang%E6%95%B0%E7%BB%84.png)  \n```go\nvar b [5]int //没有初始值，会自动的给出默认值{0,0,0,0,0}\na:=[5]int{1,2,3,4,5}\nb:=[...]int{1,2,3,4,5}\n```\n#### slice\n数组的长度是不可改变的,在很多场景都不是很适用，但是slice不一样。slice是golang的内置类型。在slice中有两个概念,和数组一样，有两个内置的属性：一个是len长度，一个是cap容量。slice是应用类型,因此当传递切片将和应用同一指针，修改值会影响其他的对象。\n```go\nvar a []int\n//一般建议的初始化是用make()来初始化\n```\n上面就可以表示一个slice,和声明数组差不多。只是少了一个长度。\nslice也可以从一个数组或者已经存在的`slice`中再次声明。`slice`通过`a[i:j]`来获取,其中i是数组的开始位置,j是结束位置(不包含),长度为j-i  \n```go\n// 声明一个含有10个元素元素类型为byte的数组\nvar arr = [10]byte {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'}\n\n// 声明两个含有byte的slice\nvar a, b ,c ,d[]byte\n// a指向数组的第3个元素开始，并到第五个元素结束，现在a含有的元素: arr[2]、arr[3]和ar[4]\na = arr[2:5]\n// b是数组arr的另一个slice, b的元素是：arr[3]和arr[4]\nb = arr[3:5]\n//c是数组arr的另一个slice,c的元素师:arr[0],arr[1],arr[2]\nc = arr [:3]\n//slice的默认开始位置是0，arr[:n]等价于arr[0:n]\n//slice的第二个序列默认是数组的长度，ar[n:]等价于ar[n:len(ar)]\n//如果从一个数组里面直接获取slice，可以这样ar[:],因为默认第一个序列是0，第二个是数组的长度，即等价于ar[0:len(ar)]\n```\n基本结构如下：  \n![](http://ofa8x9gy9.bkt.clouddn.com/slice.png)   \n`slice`是引用类型,所以修改a中元素中的值，那么b中的值也会改变。\n对于slice有几个有用的内置函数：\n* `len()`获取slice的长度\n* `cap()`获取slice的最大容量\n* `append()` 向slice中追加一个或者多个元素，然后返回一个和slice一样类型的slice\n* `copy()` 从源slice的src中复制元素到目标dst，并且返回复制的元素的个数\n需要注意的是`appendd`函数会改变slice的应用。cap不足时会按照cap的两倍进行扩容。\n### 有意思的算法---扩容\n首先有一个问题:在ArrayList中扩容是通过复制整个数组完成,每次当数组的容量满了，就会重新建一个长度是上次两倍的数组，然后进行复制操作，然后释放掉原来的数组。时间复杂度可以简单的看作使用for循环的嵌套，在复制数组的时候相当于用for循环来遍历了一遍数组。所以复制的时间复杂度应该是O(N)的。  \n但是整个ArrayList在末尾插入的时候表现是很快的。这里就有一个均摊的思想。  \n- 首先并不是每个元素的插入都会触发复制扩容这个操作。只有才数组长度不够的情况下，才会产生。然后均摊下来就是o(1)了。所以在某些情况下AarryList的性能会出现波动也是这个原因。\n\n\n\n\n","source":"_posts/golang的切片和Java的动态数组.md","raw":"---\ntitle: golang的切片和Java的动态数组\ndate: 2016-11-29 17:44:44\ncategories: \n- Java和golang\ntags: \n- golang\n- Java\n---\n### Java里的动态数组---ArrayList  \nArrayList是实现List接口的动态数组，每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。随着向ArrayList中不断添加元素，容量会自动增长，自动增长会带来数据向新数组的*重新拷贝*。同时需要注意的是这个实现不是同步的。如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。(结构上的修改是指任何添加或删除一个或多个元素的的操作，或者显示调整底层数组的大小；仅仅设置元素的值不是结构上的修改)  \n<!--more-->\n##### Java里面的初始化和实现\n```java\n   public class ArrayList<E>   extends \t AbstractList<E>  implements   List<E>, RandomAccess, Cloneable, java.io.Serializable{\n \t\n     //设置arrayList默认容量\n     private static final int DEFAULT_CAPACITY = 10;\n \n     //空数组，当调用无参数构造函数的时候默认给个空数组\n     private static final Object[] EMPTY_ELEMENTDATA = {};\n \n     //这才是真正保存数据的数组\n     private transient Object[] elementData;\n \n     //arrayList的实际元素数量\n     private int size;\n \n     //构造方法传入默认的capacity 设置默认数组大小\n     public ArrayList(int initialCapacity) {\n         super();\n         if (initialCapacity < 0)\n             throw new IllegalArgumentException(\"Illegal Capacity: \"+ initialCapacity);\n         this.elementData = new Object[initialCapacity];\n     }\n \n     //无参数构造方法默认为空数组\n     public ArrayList() {\n         super();\n         this.elementData = EMPTY_ELEMENTDATA;\n     }\n \n     //构造方法传入一个Collection， 则将Collection里面的值copy到arrayList\n     public ArrayList(Collection<? extends E> c) {\n         elementData = c.toArray();\n         size = elementData.length;\n         if (elementData.getClass() != Object[].class)\n             elementData = Arrays.copyOf(elementData, size, Object[].class);\n     }\n}\n```\n从上面的源码可以看出来，ArrayList的本质就是数组的，其中的add,get,set,remove等操作都是对数组的操作，所以ArrayList的特性基本都是源于数组:有序、元素可以重复、插入慢、获取快等特性。\n\n##### ArrayList里面的将数组动态扩容实现add和remove\n```java\n    //在末尾增加元素，虽然有时需要扩容但是时间复杂度为O(1)\n\tpublic boolean add(E e) {\n         ensureCapacityInternal(size + 1);  // Increments modCount!!\n         elementData[size++] = e;\n         return true;\n     }\n     //在数组中间增加元素，因为需要移动后面的元素，所以时间复杂度为O(n)\n     public void add(int index, E element) {\n         rangeCheckForAdd(index);\n \n         ensureCapacityInternal(size + 1);  // Increments modCount!!\n         System.arraycopy(elementData, index, elementData, index + 1,\n                          size - index);\n         elementData[index] = element;\n     } \n     private void ensureCapacityInternal(int minCapacity) {\n         if (elementData == EMPTY_ELEMENTDATA) {\n              minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n         }\n         ensureExplicitCapacity(minCapacity);\n      }\n      private void ensureExplicitCapacity(int minCapacity) {\n          modCount++;\n         //超出了数组可容纳的长度，需要进行动态扩展\n         if (minCapacity - elementData.length > 0)\n             grow(minCapacity);\n     }\n      //这才是动态扩展的核心\n     private void grow(int minCapacity) {\n         int oldCapacity = elementData.length;\n         //设置新数组的容量扩展为原来数组的1.5倍\n         int newCapacity = oldCapacity + (oldCapacity >> 1);\n         //再判断一下新数组的容量够不够，够了就直接使用这个长度创建新数组， 不够就将数组长度设置为需要的长度\n         if (newCapacity - minCapacity < 0)\n             newCapacity = minCapacity;\n         //判断有没超过最大限制\n         if (newCapacity - MAX_ARRAY_SIZE > 0)\n             newCapacity = hugeCapacity(minCapacity);\n         //将原来数组的值copy新数组中去\n         elementData = Arrays.copyOf(elementData, newCapacity);\n     }\n     private static int hugeCapacity(int minCapacity) {\n         if (minCapacity < 0) // overflow\n              throw new OutOfMemoryError();\n         return (minCapacity > MAX_ARRAY_SIZE) ?\n             Integer.MAX_VALUE :\n             MAX_ARRAY_SIZE;\n     }\n```\n从上面的ArrayList的源码就可以知道,整个ArrayList的动态实现就是在增加数据的时候判断数组的容量是否足够,不够就重新生成一个1.5倍的数组,然后进行复制。这就是整个ArrayList的核心。\n### golang里面的动态数组---slice\n#### Go中的数组定义\n在Go中的数组和Java有点不一样。在golang中数组是内置类型,初始化后长度是固定的，没有办法修改其长度,数组的长度也是其类型的一部分。数组是值类型,通过从0开始的下标索引访问元素值。值得注意的是如果GO中的数组作为函数的参数，那么实际传递的参数是一份数组的拷贝,而不是数组的指针。  \n![](http://ofa8x9gy9.bkt.clouddn.com/golang%E6%95%B0%E7%BB%84.png)  \n```go\nvar b [5]int //没有初始值，会自动的给出默认值{0,0,0,0,0}\na:=[5]int{1,2,3,4,5}\nb:=[...]int{1,2,3,4,5}\n```\n#### slice\n数组的长度是不可改变的,在很多场景都不是很适用，但是slice不一样。slice是golang的内置类型。在slice中有两个概念,和数组一样，有两个内置的属性：一个是len长度，一个是cap容量。slice是应用类型,因此当传递切片将和应用同一指针，修改值会影响其他的对象。\n```go\nvar a []int\n//一般建议的初始化是用make()来初始化\n```\n上面就可以表示一个slice,和声明数组差不多。只是少了一个长度。\nslice也可以从一个数组或者已经存在的`slice`中再次声明。`slice`通过`a[i:j]`来获取,其中i是数组的开始位置,j是结束位置(不包含),长度为j-i  \n```go\n// 声明一个含有10个元素元素类型为byte的数组\nvar arr = [10]byte {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'}\n\n// 声明两个含有byte的slice\nvar a, b ,c ,d[]byte\n// a指向数组的第3个元素开始，并到第五个元素结束，现在a含有的元素: arr[2]、arr[3]和ar[4]\na = arr[2:5]\n// b是数组arr的另一个slice, b的元素是：arr[3]和arr[4]\nb = arr[3:5]\n//c是数组arr的另一个slice,c的元素师:arr[0],arr[1],arr[2]\nc = arr [:3]\n//slice的默认开始位置是0，arr[:n]等价于arr[0:n]\n//slice的第二个序列默认是数组的长度，ar[n:]等价于ar[n:len(ar)]\n//如果从一个数组里面直接获取slice，可以这样ar[:],因为默认第一个序列是0，第二个是数组的长度，即等价于ar[0:len(ar)]\n```\n基本结构如下：  \n![](http://ofa8x9gy9.bkt.clouddn.com/slice.png)   \n`slice`是引用类型,所以修改a中元素中的值，那么b中的值也会改变。\n对于slice有几个有用的内置函数：\n* `len()`获取slice的长度\n* `cap()`获取slice的最大容量\n* `append()` 向slice中追加一个或者多个元素，然后返回一个和slice一样类型的slice\n* `copy()` 从源slice的src中复制元素到目标dst，并且返回复制的元素的个数\n需要注意的是`appendd`函数会改变slice的应用。cap不足时会按照cap的两倍进行扩容。\n### 有意思的算法---扩容\n首先有一个问题:在ArrayList中扩容是通过复制整个数组完成,每次当数组的容量满了，就会重新建一个长度是上次两倍的数组，然后进行复制操作，然后释放掉原来的数组。时间复杂度可以简单的看作使用for循环的嵌套，在复制数组的时候相当于用for循环来遍历了一遍数组。所以复制的时间复杂度应该是O(N)的。  \n但是整个ArrayList在末尾插入的时候表现是很快的。这里就有一个均摊的思想。  \n- 首先并不是每个元素的插入都会触发复制扩容这个操作。只有才数组长度不够的情况下，才会产生。然后均摊下来就是o(1)了。所以在某些情况下AarryList的性能会出现波动也是这个原因。\n\n\n\n\n","slug":"golang的切片和Java的动态数组","published":1,"updated":"2016-12-01T08:01:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw78947b0007ariky2jg6rn7","content":"<h3 id=\"Java里的动态数组—ArrayList\"><a href=\"#Java里的动态数组—ArrayList\" class=\"headerlink\" title=\"Java里的动态数组—ArrayList\"></a>Java里的动态数组—ArrayList</h3><p>ArrayList是实现List接口的动态数组，每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。随着向ArrayList中不断添加元素，容量会自动增长，自动增长会带来数据向新数组的<em>重新拷贝</em>。同时需要注意的是这个实现不是同步的。如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。(结构上的修改是指任何添加或删除一个或多个元素的的操作，或者显示调整底层数组的大小；仅仅设置元素的值不是结构上的修改)<br><a id=\"more\"></a></p>\n<h5 id=\"Java里面的初始化和实现\"><a href=\"#Java里面的初始化和实现\" class=\"headerlink\" title=\"Java里面的初始化和实现\"></a>Java里面的初始化和实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt;   <span class=\"keyword\">extends</span> \t <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;  <span class=\"keyword\">implements</span>   <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span>&#123;</div><div class=\"line\"> \t</div><div class=\"line\">     <span class=\"comment\">//设置arrayList默认容量</span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</div><div class=\"line\"> </div><div class=\"line\">     <span class=\"comment\">//空数组，当调用无参数构造函数的时候默认给个空数组</span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class=\"line\"> </div><div class=\"line\">     <span class=\"comment\">//这才是真正保存数据的数组</span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> Object[] elementData;</div><div class=\"line\"> </div><div class=\"line\">     <span class=\"comment\">//arrayList的实际元素数量</span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</div><div class=\"line\"> </div><div class=\"line\">     <span class=\"comment\">//构造方法传入默认的capacity 设置默认数组大小</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">super</span>();</div><div class=\"line\">         <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</div><div class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Capacity: \"</span>+ initialCapacity);</div><div class=\"line\">         <span class=\"keyword\">this</span>.elementData = <span class=\"keyword\">new</span> Object[initialCapacity];</div><div class=\"line\">     &#125;</div><div class=\"line\"> </div><div class=\"line\">     <span class=\"comment\">//无参数构造方法默认为空数组</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">super</span>();</div><div class=\"line\">         <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class=\"line\">     &#125;</div><div class=\"line\"> </div><div class=\"line\">     <span class=\"comment\">//构造方法传入一个Collection， 则将Collection里面的值copy到arrayList</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class=\"line\">         elementData = c.toArray();</div><div class=\"line\">         size = elementData.length;</div><div class=\"line\">         <span class=\"keyword\">if</span> (elementData.getClass() != Object[].class)</div><div class=\"line\">             elementData = Arrays.copyOf(elementData, size, Object[].class);</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面的源码可以看出来，ArrayList的本质就是数组的，其中的add,get,set,remove等操作都是对数组的操作，所以ArrayList的特性基本都是源于数组:有序、元素可以重复、插入慢、获取快等特性。</p>\n<h5 id=\"ArrayList里面的将数组动态扩容实现add和remove\"><a href=\"#ArrayList里面的将数组动态扩容实现add和remove\" class=\"headerlink\" title=\"ArrayList里面的将数组动态扩容实现add和remove\"></a>ArrayList里面的将数组动态扩容实现add和remove</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"comment\">//在末尾增加元素，虽然有时需要扩容但是时间复杂度为O(1)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></div><div class=\"line\">        elementData[size++] = e;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//在数组中间增加元素，因为需要移动后面的元素，所以时间复杂度为O(n)</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</div><div class=\"line\">        rangeCheckForAdd(index);</div><div class=\"line\"></div><div class=\"line\">        ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></div><div class=\"line\">        System.arraycopy(elementData, index, elementData, index + <span class=\"number\">1</span>,</div><div class=\"line\">                         size - index);</div><div class=\"line\">        elementData[index] = element;</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (elementData == EMPTY_ELEMENTDATA) &#123;</div><div class=\"line\">             minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ensureExplicitCapacity(minCapacity);</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">         modCount++;</div><div class=\"line\">        <span class=\"comment\">//超出了数组可容纳的长度，需要进行动态扩展</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</div><div class=\"line\">            grow(minCapacity);</div><div class=\"line\">    &#125;</div><div class=\"line\">     <span class=\"comment\">//这才是动态扩展的核心</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldCapacity = elementData.length;</div><div class=\"line\">        <span class=\"comment\">//设置新数组的容量扩展为原来数组的1.5倍</span></div><div class=\"line\">        <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"comment\">//再判断一下新数组的容量够不够，够了就直接使用这个长度创建新数组， 不够就将数组长度设置为需要的长度</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</div><div class=\"line\">            newCapacity = minCapacity;</div><div class=\"line\">        <span class=\"comment\">//判断有没超过最大限制</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</div><div class=\"line\">            newCapacity = hugeCapacity(minCapacity);</div><div class=\"line\">        <span class=\"comment\">//将原来数组的值copy新数组中去</span></div><div class=\"line\">        elementData = Arrays.copyOf(elementData, newCapacity);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></div><div class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</div><div class=\"line\">        <span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</div><div class=\"line\">            Integer.MAX_VALUE :</div><div class=\"line\">            MAX_ARRAY_SIZE;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>从上面的ArrayList的源码就可以知道,整个ArrayList的动态实现就是在增加数据的时候判断数组的容量是否足够,不够就重新生成一个1.5倍的数组,然后进行复制。这就是整个ArrayList的核心。</p>\n<h3 id=\"golang里面的动态数组—slice\"><a href=\"#golang里面的动态数组—slice\" class=\"headerlink\" title=\"golang里面的动态数组—slice\"></a>golang里面的动态数组—slice</h3><h4 id=\"Go中的数组定义\"><a href=\"#Go中的数组定义\" class=\"headerlink\" title=\"Go中的数组定义\"></a>Go中的数组定义</h4><p>在Go中的数组和Java有点不一样。在golang中数组是内置类型,初始化后长度是固定的，没有办法修改其长度,数组的长度也是其类型的一部分。数组是值类型,通过从0开始的下标索引访问元素值。值得注意的是如果GO中的数组作为函数的参数，那么实际传递的参数是一份数组的拷贝,而不是数组的指针。<br><img src=\"http://ofa8x9gy9.bkt.clouddn.com/golang%E6%95%B0%E7%BB%84.png\" alt=\"\"><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> b [<span class=\"number\">5</span>]<span class=\"keyword\">int</span> <span class=\"comment\">//没有初始值，会自动的给出默认值&#123;0,0,0,0,0&#125;</span></div><div class=\"line\">a:=[<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</div><div class=\"line\">b:=[...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h4><p>数组的长度是不可改变的,在很多场景都不是很适用，但是slice不一样。slice是golang的内置类型。在slice中有两个概念,和数组一样，有两个内置的属性：一个是len长度，一个是cap容量。slice是应用类型,因此当传递切片将和应用同一指针，修改值会影响其他的对象。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a []<span class=\"keyword\">int</span></div><div class=\"line\"><span class=\"comment\">//一般建议的初始化是用make()来初始化</span></div></pre></td></tr></table></figure></p>\n<p>上面就可以表示一个slice,和声明数组差不多。只是少了一个长度。<br>slice也可以从一个数组或者已经存在的<code>slice</code>中再次声明。<code>slice</code>通过<code>a[i:j]</code>来获取,其中i是数组的开始位置,j是结束位置(不包含),长度为j-i<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 声明一个含有10个元素元素类型为byte的数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>]<span class=\"keyword\">byte</span> &#123;<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'g'</span>, <span class=\"string\">'h'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'j'</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 声明两个含有byte的slice</span></div><div class=\"line\"><span class=\"keyword\">var</span> a, b ,c ,d[]<span class=\"keyword\">byte</span></div><div class=\"line\"><span class=\"comment\">// a指向数组的第3个元素开始，并到第五个元素结束，现在a含有的元素: arr[2]、arr[3]和ar[4]</span></div><div class=\"line\">a = arr[<span class=\"number\">2</span>:<span class=\"number\">5</span>]</div><div class=\"line\"><span class=\"comment\">// b是数组arr的另一个slice, b的元素是：arr[3]和arr[4]</span></div><div class=\"line\">b = arr[<span class=\"number\">3</span>:<span class=\"number\">5</span>]</div><div class=\"line\"><span class=\"comment\">//c是数组arr的另一个slice,c的元素师:arr[0],arr[1],arr[2]</span></div><div class=\"line\">c = arr [:<span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"comment\">//slice的默认开始位置是0，arr[:n]等价于arr[0:n]</span></div><div class=\"line\"><span class=\"comment\">//slice的第二个序列默认是数组的长度，ar[n:]等价于ar[n:len(ar)]</span></div><div class=\"line\"><span class=\"comment\">//如果从一个数组里面直接获取slice，可以这样ar[:],因为默认第一个序列是0，第二个是数组的长度，即等价于ar[0:len(ar)]</span></div></pre></td></tr></table></figure></p>\n<p>基本结构如下：<br><img src=\"http://ofa8x9gy9.bkt.clouddn.com/slice.png\" alt=\"\"><br><code>slice</code>是引用类型,所以修改a中元素中的值，那么b中的值也会改变。<br>对于slice有几个有用的内置函数：</p>\n<ul>\n<li><code>len()</code>获取slice的长度</li>\n<li><code>cap()</code>获取slice的最大容量</li>\n<li><code>append()</code> 向slice中追加一个或者多个元素，然后返回一个和slice一样类型的slice</li>\n<li><code>copy()</code> 从源slice的src中复制元素到目标dst，并且返回复制的元素的个数<br>需要注意的是<code>appendd</code>函数会改变slice的应用。cap不足时会按照cap的两倍进行扩容。<h3 id=\"有意思的算法—扩容\"><a href=\"#有意思的算法—扩容\" class=\"headerlink\" title=\"有意思的算法—扩容\"></a>有意思的算法—扩容</h3>首先有一个问题:在ArrayList中扩容是通过复制整个数组完成,每次当数组的容量满了，就会重新建一个长度是上次两倍的数组，然后进行复制操作，然后释放掉原来的数组。时间复杂度可以简单的看作使用for循环的嵌套，在复制数组的时候相当于用for循环来遍历了一遍数组。所以复制的时间复杂度应该是O(N)的。<br>但是整个ArrayList在末尾插入的时候表现是很快的。这里就有一个均摊的思想。  </li>\n</ul>\n<ul>\n<li>首先并不是每个元素的插入都会触发复制扩容这个操作。只有才数组长度不够的情况下，才会产生。然后均摊下来就是o(1)了。所以在某些情况下AarryList的性能会出现波动也是这个原因。</li>\n</ul>\n","excerpt":"<h3 id=\"Java里的动态数组—ArrayList\"><a href=\"#Java里的动态数组—ArrayList\" class=\"headerlink\" title=\"Java里的动态数组—ArrayList\"></a>Java里的动态数组—ArrayList</h3><p>ArrayList是实现List接口的动态数组，每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。随着向ArrayList中不断添加元素，容量会自动增长，自动增长会带来数据向新数组的<em>重新拷贝</em>。同时需要注意的是这个实现不是同步的。如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。(结构上的修改是指任何添加或删除一个或多个元素的的操作，或者显示调整底层数组的大小；仅仅设置元素的值不是结构上的修改)<br>","more":"</p>\n<h5 id=\"Java里面的初始化和实现\"><a href=\"#Java里面的初始化和实现\" class=\"headerlink\" title=\"Java里面的初始化和实现\"></a>Java里面的初始化和实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt;   <span class=\"keyword\">extends</span> \t <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;  <span class=\"keyword\">implements</span>   <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span>&#123;</div><div class=\"line\"> \t</div><div class=\"line\">     <span class=\"comment\">//设置arrayList默认容量</span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</div><div class=\"line\"> </div><div class=\"line\">     <span class=\"comment\">//空数组，当调用无参数构造函数的时候默认给个空数组</span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class=\"line\"> </div><div class=\"line\">     <span class=\"comment\">//这才是真正保存数据的数组</span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> Object[] elementData;</div><div class=\"line\"> </div><div class=\"line\">     <span class=\"comment\">//arrayList的实际元素数量</span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</div><div class=\"line\"> </div><div class=\"line\">     <span class=\"comment\">//构造方法传入默认的capacity 设置默认数组大小</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">super</span>();</div><div class=\"line\">         <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</div><div class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Capacity: \"</span>+ initialCapacity);</div><div class=\"line\">         <span class=\"keyword\">this</span>.elementData = <span class=\"keyword\">new</span> Object[initialCapacity];</div><div class=\"line\">     &#125;</div><div class=\"line\"> </div><div class=\"line\">     <span class=\"comment\">//无参数构造方法默认为空数组</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">super</span>();</div><div class=\"line\">         <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class=\"line\">     &#125;</div><div class=\"line\"> </div><div class=\"line\">     <span class=\"comment\">//构造方法传入一个Collection， 则将Collection里面的值copy到arrayList</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class=\"line\">         elementData = c.toArray();</div><div class=\"line\">         size = elementData.length;</div><div class=\"line\">         <span class=\"keyword\">if</span> (elementData.getClass() != Object[].class)</div><div class=\"line\">             elementData = Arrays.copyOf(elementData, size, Object[].class);</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面的源码可以看出来，ArrayList的本质就是数组的，其中的add,get,set,remove等操作都是对数组的操作，所以ArrayList的特性基本都是源于数组:有序、元素可以重复、插入慢、获取快等特性。</p>\n<h5 id=\"ArrayList里面的将数组动态扩容实现add和remove\"><a href=\"#ArrayList里面的将数组动态扩容实现add和remove\" class=\"headerlink\" title=\"ArrayList里面的将数组动态扩容实现add和remove\"></a>ArrayList里面的将数组动态扩容实现add和remove</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"comment\">//在末尾增加元素，虽然有时需要扩容但是时间复杂度为O(1)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></div><div class=\"line\">        elementData[size++] = e;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//在数组中间增加元素，因为需要移动后面的元素，所以时间复杂度为O(n)</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</div><div class=\"line\">        rangeCheckForAdd(index);</div><div class=\"line\"></div><div class=\"line\">        ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></div><div class=\"line\">        System.arraycopy(elementData, index, elementData, index + <span class=\"number\">1</span>,</div><div class=\"line\">                         size - index);</div><div class=\"line\">        elementData[index] = element;</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (elementData == EMPTY_ELEMENTDATA) &#123;</div><div class=\"line\">             minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ensureExplicitCapacity(minCapacity);</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">         modCount++;</div><div class=\"line\">        <span class=\"comment\">//超出了数组可容纳的长度，需要进行动态扩展</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</div><div class=\"line\">            grow(minCapacity);</div><div class=\"line\">    &#125;</div><div class=\"line\">     <span class=\"comment\">//这才是动态扩展的核心</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldCapacity = elementData.length;</div><div class=\"line\">        <span class=\"comment\">//设置新数组的容量扩展为原来数组的1.5倍</span></div><div class=\"line\">        <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"comment\">//再判断一下新数组的容量够不够，够了就直接使用这个长度创建新数组， 不够就将数组长度设置为需要的长度</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</div><div class=\"line\">            newCapacity = minCapacity;</div><div class=\"line\">        <span class=\"comment\">//判断有没超过最大限制</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</div><div class=\"line\">            newCapacity = hugeCapacity(minCapacity);</div><div class=\"line\">        <span class=\"comment\">//将原来数组的值copy新数组中去</span></div><div class=\"line\">        elementData = Arrays.copyOf(elementData, newCapacity);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></div><div class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</div><div class=\"line\">        <span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</div><div class=\"line\">            Integer.MAX_VALUE :</div><div class=\"line\">            MAX_ARRAY_SIZE;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>从上面的ArrayList的源码就可以知道,整个ArrayList的动态实现就是在增加数据的时候判断数组的容量是否足够,不够就重新生成一个1.5倍的数组,然后进行复制。这就是整个ArrayList的核心。</p>\n<h3 id=\"golang里面的动态数组—slice\"><a href=\"#golang里面的动态数组—slice\" class=\"headerlink\" title=\"golang里面的动态数组—slice\"></a>golang里面的动态数组—slice</h3><h4 id=\"Go中的数组定义\"><a href=\"#Go中的数组定义\" class=\"headerlink\" title=\"Go中的数组定义\"></a>Go中的数组定义</h4><p>在Go中的数组和Java有点不一样。在golang中数组是内置类型,初始化后长度是固定的，没有办法修改其长度,数组的长度也是其类型的一部分。数组是值类型,通过从0开始的下标索引访问元素值。值得注意的是如果GO中的数组作为函数的参数，那么实际传递的参数是一份数组的拷贝,而不是数组的指针。<br><img src=\"http://ofa8x9gy9.bkt.clouddn.com/golang%E6%95%B0%E7%BB%84.png\" alt=\"\"><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> b [<span class=\"number\">5</span>]<span class=\"keyword\">int</span> <span class=\"comment\">//没有初始值，会自动的给出默认值&#123;0,0,0,0,0&#125;</span></div><div class=\"line\">a:=[<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</div><div class=\"line\">b:=[...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h4><p>数组的长度是不可改变的,在很多场景都不是很适用，但是slice不一样。slice是golang的内置类型。在slice中有两个概念,和数组一样，有两个内置的属性：一个是len长度，一个是cap容量。slice是应用类型,因此当传递切片将和应用同一指针，修改值会影响其他的对象。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a []<span class=\"keyword\">int</span></div><div class=\"line\"><span class=\"comment\">//一般建议的初始化是用make()来初始化</span></div></pre></td></tr></table></figure></p>\n<p>上面就可以表示一个slice,和声明数组差不多。只是少了一个长度。<br>slice也可以从一个数组或者已经存在的<code>slice</code>中再次声明。<code>slice</code>通过<code>a[i:j]</code>来获取,其中i是数组的开始位置,j是结束位置(不包含),长度为j-i<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 声明一个含有10个元素元素类型为byte的数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>]<span class=\"keyword\">byte</span> &#123;<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'g'</span>, <span class=\"string\">'h'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'j'</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 声明两个含有byte的slice</span></div><div class=\"line\"><span class=\"keyword\">var</span> a, b ,c ,d[]<span class=\"keyword\">byte</span></div><div class=\"line\"><span class=\"comment\">// a指向数组的第3个元素开始，并到第五个元素结束，现在a含有的元素: arr[2]、arr[3]和ar[4]</span></div><div class=\"line\">a = arr[<span class=\"number\">2</span>:<span class=\"number\">5</span>]</div><div class=\"line\"><span class=\"comment\">// b是数组arr的另一个slice, b的元素是：arr[3]和arr[4]</span></div><div class=\"line\">b = arr[<span class=\"number\">3</span>:<span class=\"number\">5</span>]</div><div class=\"line\"><span class=\"comment\">//c是数组arr的另一个slice,c的元素师:arr[0],arr[1],arr[2]</span></div><div class=\"line\">c = arr [:<span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"comment\">//slice的默认开始位置是0，arr[:n]等价于arr[0:n]</span></div><div class=\"line\"><span class=\"comment\">//slice的第二个序列默认是数组的长度，ar[n:]等价于ar[n:len(ar)]</span></div><div class=\"line\"><span class=\"comment\">//如果从一个数组里面直接获取slice，可以这样ar[:],因为默认第一个序列是0，第二个是数组的长度，即等价于ar[0:len(ar)]</span></div></pre></td></tr></table></figure></p>\n<p>基本结构如下：<br><img src=\"http://ofa8x9gy9.bkt.clouddn.com/slice.png\" alt=\"\"><br><code>slice</code>是引用类型,所以修改a中元素中的值，那么b中的值也会改变。<br>对于slice有几个有用的内置函数：</p>\n<ul>\n<li><code>len()</code>获取slice的长度</li>\n<li><code>cap()</code>获取slice的最大容量</li>\n<li><code>append()</code> 向slice中追加一个或者多个元素，然后返回一个和slice一样类型的slice</li>\n<li><code>copy()</code> 从源slice的src中复制元素到目标dst，并且返回复制的元素的个数<br>需要注意的是<code>appendd</code>函数会改变slice的应用。cap不足时会按照cap的两倍进行扩容。<h3 id=\"有意思的算法—扩容\"><a href=\"#有意思的算法—扩容\" class=\"headerlink\" title=\"有意思的算法—扩容\"></a>有意思的算法—扩容</h3>首先有一个问题:在ArrayList中扩容是通过复制整个数组完成,每次当数组的容量满了，就会重新建一个长度是上次两倍的数组，然后进行复制操作，然后释放掉原来的数组。时间复杂度可以简单的看作使用for循环的嵌套，在复制数组的时候相当于用for循环来遍历了一遍数组。所以复制的时间复杂度应该是O(N)的。<br>但是整个ArrayList在末尾插入的时候表现是很快的。这里就有一个均摊的思想。  </li>\n</ul>\n<ul>\n<li>首先并不是每个元素的插入都会触发复制扩容这个操作。只有才数组长度不够的情况下，才会产生。然后均摊下来就是o(1)了。所以在某些情况下AarryList的性能会出现波动也是这个原因。</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciw78946s0002arik2gqnh7ai","category_id":"ciw7894760005arikfgr1u8p0","_id":"ciw78947e000barike1m4uf30"},{"post_id":"ciw7894740004arikkl62xx2r","category_id":"ciw78947c0008arikpjmysqh2","_id":"ciw78947h000farikknjxirqw"},{"post_id":"ciw78947b0007ariky2jg6rn7","category_id":"ciw78947g000carikyce8xhf3","_id":"ciw78947h000harikqhutqx1m"}],"PostTag":[{"post_id":"ciw78946s0002arik2gqnh7ai","tag_id":"ciw78947a0006ariklgj1x03i","_id":"ciw78947d000aarikuo8pucqr"},{"post_id":"ciw7894740004arikkl62xx2r","tag_id":"ciw78947c0009ariknk8vnpej","_id":"ciw78947g000earik7h86kgwz"},{"post_id":"ciw78947b0007ariky2jg6rn7","tag_id":"ciw78947g000darikuhn3wkos","_id":"ciw78947i000iarikosqu3a00"},{"post_id":"ciw78947b0007ariky2jg6rn7","tag_id":"ciw78947h000garikftogs44a","_id":"ciw78947i000jariktenj8zhr"}],"Tag":[{"name":"ip","_id":"ciw78947a0006ariklgj1x03i"},{"name":"start","_id":"ciw78947c0009ariknk8vnpej"},{"name":"golang","_id":"ciw78947g000darikuhn3wkos"},{"name":"Java","_id":"ciw78947h000garikftogs44a"}]}}